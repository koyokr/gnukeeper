name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Verify version match
        run: |
          # Extract version from bootstrap.php
          FILE_VERSION=$(grep "define('GK_VERSION'" plugin/gnukeeper/config.php | sed -E "s/.*'([0-9]+\.[0-9]+\.[0-9]+)'.*/\1/")
          TAG_VERSION="${{ steps.get_version.outputs.VERSION }}"
          
          if [ "$FILE_VERSION" != "$TAG_VERSION" ]; then
            echo "Error: Version mismatch!"
            echo "File version: $FILE_VERSION"
            echo "Tag version: $TAG_VERSION"
            exit 1
          fi
          
          echo "Version verified: $FILE_VERSION"
      
      - name: Create release package
        run: |
          # Create temp directory
          mkdir -p gnukeeper-release
          
          # Copy plugin files
          cp -r plugin gnukeeper-release/
          cp -r adm gnukeeper-release/
          cp -r extend gnukeeper-release/
          
          # Create ZIP file
          cd gnukeeper-release
          zip -r ../gnukeeper-v${{ steps.get_version.outputs.VERSION }}.zip . \
            -x "*.git*" \
            -x "*CLAUDE.md" \
            -x "*CLAUDE.local.md" \
            -x "*.gitignore" \
            -x "*__pycache__*" \
            -x "*.pyc" \
            -x "*node_modules*" \
            -x "*.DS_Store"
          cd ..
      
      - name: Generate release notes
        id: release_notes
        run: |
          # Get commit messages since last tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            echo "NOTES=첫 번째 릴리스입니다." >> $GITHUB_OUTPUT
          else
            NOTES=$(git log $PREV_TAG..HEAD --pretty=format:"- %s" | head -20)
            echo "NOTES<<EOF" >> $GITHUB_OUTPUT
            echo "## 변경사항" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "$NOTES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: GnuKeeper v${{ steps.get_version.outputs.VERSION }}
          body: |
            # GnuKeeper v${{ steps.get_version.outputs.VERSION }}
            
            Gnuboard5 보안 플러그인
            
            ${{ steps.release_notes.outputs.NOTES }}
            
            ## 설치 방법
            1. 압축 파일을 다운로드합니다.
            2. Gnuboard5 루트 디렉토리에 압축을 해제합니다.
            3. 관리자 페이지에서 GnuKeeper 메뉴를 확인합니다.
          draft: false
          prerelease: false
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./gnukeeper-v${{ steps.get_version.outputs.VERSION }}.zip
          asset_name: gnukeeper-v${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/zip